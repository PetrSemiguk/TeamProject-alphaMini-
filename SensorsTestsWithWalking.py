import asyncio
import logging
import sys
import mini.mini_sdk as MiniSdk
from mini.dns.dns_browser import WiFiDevice
from mini.apis.base_api import MiniApiResultType
from mini.apis.api_sound import StartPlayTTS
# --- –ò–ú–ü–û–†–¢–´ ---
from mini.apis.api_action import MoveRobot, MoveRobotDirection, StopAllAction
from mini.apis.api_sence import GetInfraredDistance

# === SDK Configuration ===
MiniSdk.set_log_level(logging.INFO)
MiniSdk.set_robot_type(MiniSdk.RobotType.EDU)

# === Constants ===
ROBOT_ID = "412"
SEARCH_TIMEOUT = 20
SLEEP_DURATION = 1
PHRASE_TO_SPEAK_START = "Welcome to PSB academy, I am robot promoter. Nice to meet you!"
PHRASE_TO_SPEAK_STOP = "Stop. Obstacle detected."
PHRASE_TO_SPEAK_RESUME = "Obstacle removed. Resuming movement."  # –ù–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
# *** –¶–ï–õ–ï–í–û–ï –†–ê–°–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –û–°–¢–ê–ù–û–í–ö–ò ***
TARGET_DISTANCE_MM = 100
# *** –í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø –ü–ï–†–ï–î –ü–ï–†–ï–ó–ê–ü–£–°–ö–û–ú –î–í–ò–ñ–ï–ù–ò–Ø (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ***
RESUME_WAIT_TIME = 5


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def search_device_by_name(serial_number_suffix: str, timeout: int) -> WiFiDevice:
    try:
        result = await MiniSdk.get_device_by_name(serial_number_suffix, timeout)
        print(f"[‚úì] Found device: {result}")
        return result
    except Exception as e:
        print(f"[X] Error searching for device: {e}")
        return None


async def connect_device(device: WiFiDevice):
    try:
        is_connected = await MiniSdk.connect(device)
        if is_connected:
            print(f"[‚úì] Successfully connected to {device.name}")
            return True
        else:
            print("[X] Connection failed")
            return False
    except Exception as e:
        print(f"[X] Error connecting: {e}")
        return False


async def make_alphamini_speak(text_to_speak: str):
    tts_block = StartPlayTTS(text=text_to_speak)
    await tts_block.execute()


# ----------------------------------------------------------------------
## –ï–¥–∏–Ω—ã–π –¶–∏–∫–ª: –î–≤–∏–∂–µ–Ω–∏–µ, –û—Å—Ç–∞–Ω–æ–≤–∫–∞, –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
# ----------------------------------------------------------------------

async def move_and_monitor():
    """–î–≤–∏–∂–µ–Ω–∏–µ —à–∞–≥–∞–º–∏ –ø–æ 1, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–Ω—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.
       –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∂–¥–µ—Ç, –ø–æ–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç, –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ."""

    print("\n=======================================================")
    print(f" [ü§ñ] –î–≤–∏–∂–µ–Ω–∏–µ —à–∞–≥–∞–º–∏ –ø–æ 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ {TARGET_DISTANCE_MM} –º–º.")
    print("=======================================================")

    monitor_command = GetInfraredDistance(is_serial=True)
    move_one_step_command = MoveRobot(
        step=1,
        direction=MoveRobotDirection.FORWARD,
        is_serial=True  # –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 1 —à–∞–≥–∞
    )

    while True:  # –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –¶–ò–ö–õ, –≤—ã—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ Ctrl+C

        # 1. –ü–†–û–í–ï–†–ö–ê –°–ï–ù–°–û–†–ê –ü–ï–†–ï–î –®–ê–ì–û–ú
        result_type, response = await monitor_command.execute()
        distance_mm = float('inf')

        if result_type == MiniApiResultType.Success and response and hasattr(response, 'distance'):
            distance_mm = response.distance

            if distance_mm <= TARGET_DISTANCE_MM:
                print(f"\n[üõë –°–¢–û–ü!] –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞ {distance_mm} –º–º.")

                # --- –õ–û–ì–ò–ö–ê –û–°–¢–ê–ù–û–í–ö–ò –ò –û–ñ–ò–î–ê–ù–ò–Ø ---
                await StopAllAction(is_serial=True).execute()  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                await make_alphamini_speak(PHRASE_TO_SPEAK_STOP)

                print(f"[‚è∏Ô∏è] –û–∂–∏–¥–∞—é, –ø–æ–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç —É–±—Ä–∞–Ω–æ (>{TARGET_DISTANCE_MM} –º–º)...")

                # –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–≤–µ–ª–∏—á–∏—Ç—Å—è
                while distance_mm <= TARGET_DISTANCE_MM:
                    await asyncio.sleep(0.5)
                    result_type, response = await monitor_command.execute()
                    if result_type == MiniApiResultType.Success and response and hasattr(response, 'distance'):
                        distance_mm = response.distance
                        print(f"   [‚è≥] –¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_mm} –º–º.")
                    else:
                        distance_mm = TARGET_DISTANCE_MM  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∂–¥–µ–º –¥–∞–ª—å—à–µ, —Å—á–∏—Ç–∞—è, —á—Ç–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –µ—Å—Ç—å

                # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —É–±—Ä–∞–Ω–æ!
                await make_alphamini_speak(PHRASE_TO_SPEAK_RESUME)
                print(f"[‚ñ∂Ô∏è] –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ —É–±—Ä–∞–Ω–æ. –í–æ–∑–æ–±–Ω–æ–≤–ª—è—é –¥–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {RESUME_WAIT_TIME} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(RESUME_WAIT_TIME)

                continue  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥

        # 2. –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–î–ù–û–ì–û –®–ê–ì–ê (–µ—Å–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –Ω–µ—Ç)
        # print("[üèÉ] –í—ã–ø–æ–ª–Ω—è—é —à–∞–≥...") # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        await move_one_step_command.execute()

        await asyncio.sleep(0.05)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏


# ----------------------------------------------------------------------
## –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
# ----------------------------------------------------------------------

async def main():
    device = await search_device_by_name(ROBOT_ID, SEARCH_TIMEOUT)
    if not device:
        print("[Error] –†–æ–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    connected = await connect_device(device)
    if not connected:
        print("[Error] Could not connect to robot.")
        return

    try:
        program_success = await MiniSdk.enter_program()

        if program_success:
            print("[‚úì] Entered programming mode. Starting control loop...")
            await asyncio.sleep(SLEEP_DURATION)

            asyncio.create_task(make_alphamini_speak(PHRASE_TO_SPEAK_START))
            await asyncio.sleep(1)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–≤–∏–∂–µ–Ω–∏—è
            await move_and_monitor()

        else:
            print("[X] Error: Failed to enter programming mode.")

    except Exception as e:
        print(f"[X] An error occurred in main: {e}")

    finally:
        # –†–æ–±–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl+C
        await MiniSdk.release()
        print("[‚úì] –ü—Ä–æ–≥—Ä–∞–º–º–∞ Python –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–æ–±–æ—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º —Ä–µ–∂–∏–º–µ.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ä–æ–±–æ—Ç–∞
        print("\n[!] Program interrupted by user. Quitting robot program.")
        asyncio.run(MiniSdk.quit_program())
        sys.exit(0)