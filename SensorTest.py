import asyncio
import logging
import sys
from mini.dns.dns_browser import WiFiDevice
import mini.mini_sdk as MiniSdk
from mini.apis.base_api import MiniApiResultType
from mini.apis.api_sence import GetInfraredDistance

# === SDK Configuration & Constants ===
MiniSdk.set_log_level(logging.INFO)
MiniSdk.set_robot_type(MiniSdk.RobotType.EDU)
ROBOT_ID = "412"
SEARCH_TIMEOUT = 20
SLEEP_DURATION = 1


# === Search and Connect ===
async def search_device_by_name(serial_number_suffix: str, timeout: int) -> WiFiDevice:
    try:
        result = await MiniSdk.get_device_by_name(serial_number_suffix, timeout)
        print(f"[‚úì] Found device: {result}")
        return result
    except Exception:
        print("[X] Error searching for device.")
        return None


async def connect_device(device: WiFiDevice):
    try:
        is_connected = await MiniSdk.connect(device)
        if is_connected:
            print(f"[‚úì] Successfully connected to {device.name}")
            return True
        else:
            print("[X] Connection failed")
            return False
    except Exception:
        print("[X] Error connecting.")
        return False


# ----------------------------------------------------------------------
## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞—Ç—á–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
# ----------------------------------------------------------------------

async def monitor_distance():
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å TOF IR —Å–µ–Ω—Å–æ—Ä–∞."""

    print("\n=======================================================")
    print(" [üìä] –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TOF IR —Å–µ–Ω—Å–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    print("=======================================================")

    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥—ã
    monitor_command = GetInfraredDistance(is_serial=True)

    while True:
        try:
            # –í—ã–∑—ã–≤–∞–µ–º .execute() –ù–ê –ë–õ–û–ö–ï –ö–û–ú–ê–ù–î–´
            result_type, response = await monitor_command.execute()

            if result_type == MiniApiResultType.Success and response and hasattr(response, 'distance'):
                distance_mm = response.distance

                # *** –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ***
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–ª–∏–∑–∫–æ–º –æ–±—ä–µ–∫—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 200 –º–º = 20 —Å–º)
                if distance_mm < 200:
                    print(f"[üö® –ë–õ–ò–ó–ö–û] –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_mm} –º–º")
                else:
                    print(f"[‚úÖ –û–ö] –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_mm} –º–º")
            else:
                # –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
                print(f"[‚ö†Ô∏è –û–®–ò–ë–ö–ê] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_type}")

            await asyncio.sleep(0.5)

        except (asyncio.CancelledError, KeyboardInterrupt):
            print("\n[!] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            break
        except Exception as e:
            print(f"[X] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –°–ï–ù–°–û–†–ê: {e}")
            break

        # ----------------------------------------------------------------------


## –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# ----------------------------------------------------------------------

async def main():
    device_info = await search_device_by_name(ROBOT_ID, SEARCH_TIMEOUT)
    if not device_info:
        print("[Error] –†–æ–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    is_connected = await connect_device(device_info)
    if not is_connected:
        print("[Error] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ä–æ–±–æ—Ç—É.")
        return

    try:
        program_success = await MiniSdk.enter_program()

        if program_success:
            print("[‚úì] –í—Ö–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–µ–Ω.")
            await asyncio.sleep(SLEEP_DURATION)

            # –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            await monitor_distance()
        else:
            print("[X] –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ä–µ–∂–∏–º.")

    except Exception as e:
        print(f"[X] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

    finally:
        # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        await MiniSdk.quit_program()
        await MiniSdk.release()
        print("[‚úì] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n[!] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)