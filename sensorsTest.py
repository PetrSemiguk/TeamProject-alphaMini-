import asyncio
import logging
import mini.mini_sdk as MiniSdk
from mini.dns.dns_browser import WiFiDevice

MiniSdk.set_log_level(logging.INFO)
MiniSdk.set_robot_type(MiniSdk.RobotType.EDU)

ROBOT_ID = "412"
SEARCH_TIMEOUT = 10
POLL_INTERVAL = 1.0  # –∫–∞–∫ —á–∞—Å—Ç–æ —á–∏—Ç–∞—Ç—å —Å–µ–Ω—Å–æ—Ä (—Å–µ–∫)
OBSTACLE_METHOD = "get_distance_front"  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –≤ SDK –¥—Ä—É–≥–æ–π

class Robot:
    def __init__(self, device: WiFiDevice):
        self.device = device

async def search_device_by_name(serial_number_suffix: str, timeout: int) -> WiFiDevice:
    try:
        result = await MiniSdk.get_device_by_name(serial_number_suffix, timeout)
        print(f"[‚úì] Found device: {result}")
        return result
    except Exception as e:
        print(f"[X] Error searching for device: {e}")
        return None

async def connect_device(device: WiFiDevice) -> Robot:
    try:
        connected = await MiniSdk.connect(device)
        if connected:
            print(f"[‚úì] Successfully connected to {device.name}")
            return Robot(device)
        else:
            print("[X] Connection failed")
            return None
    except Exception as e:
        print(f"[X] Error connecting to device: {e}")
        return None

async def enter_programming_mode():
    try:
        await MiniSdk.enter_program()
        print("[‚úì] Entered programming mode")
    except Exception as e:
        print(f"[X] Error entering programming mode: {e}")

# === ü¶ø Walk Forward ===
async def walk_forward(steps: int = 10):
    try:
        print(f"[‚Üí] Walking forward {steps} steps...")
        for _ in range(steps):
            await MiniSdk.run_action("walk_forward")
        print("[‚úì] Walk complete")
    except Exception as e:
        print(f"[X] Error walking forward: {e}")

# === üö® Sensor Test ===
async def sensor_poll_loop():
    """–¶–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è"""
    print("[info] Starting obstacle distance test. Ctrl+C to stop.")
    while True:
        distance = None
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ SDK
            if hasattr(MiniSdk, OBSTACLE_METHOD):
                func = getattr(MiniSdk, OBSTACLE_METHOD)
                if asyncio.iscoroutinefunction(func):
                    distance = await func()
                else:
                    distance = func()
            else:
                print(f"[X] Method {OBSTACLE_METHOD} not found in SDK")
        except Exception as e:
            print(f"[X] Error reading sensor: {e}")

        if distance is not None:
            print(f"[üîç] Distance ahead: {distance} cm")
        else:
            print("[üîç] No distance reading available")

        await asyncio.sleep(POLL_INTERVAL)

async def shutdown_robot():
    print("[‚úì] Finished robot session")
    try:
        await MiniSdk.quit_program()
    except:
        pass
    try:
        await MiniSdk.release()
    except:
        pass

async def main():
    device = await search_device_by_name(ROBOT_ID, SEARCH_TIMEOUT)
    if not device:
        print("[Error] No robot found.")
        return

    robot = await connect_device(device)
    if not robot:
        print("[Error] Connection failed.")
        return

    await enter_programming_mode()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–µ–Ω—Å–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
    await sensor_poll_loop()

    await shutdown_robot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n[!] Program interrupted by user.")
